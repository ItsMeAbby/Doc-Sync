
from typing import List, Optional, TYPE_CHECKING
from datetime import datetime
from pydantic import BaseModel, Field


class DocumentBase(BaseModel):
    path: Optional[str] = None  # Path is now optional
    name: str
    title: Optional[str] = None  # Title is now optional
    is_api_ref: bool = False
    parent_id: Optional[str] = None


class DocumentCreate(DocumentBase):
    pass


class DocumentRead(DocumentBase):
    id: str
    created_at: datetime
    current_version_id: Optional[str] = None
    is_deleted: bool = False

    class Config:
        from_attributes = True


class DocumentUpdate(BaseModel):
    title: Optional[str] = None
    path: Optional[str] = None  # Still optional for updates
    name: Optional[str] = None  # Still optional for updates
    is_api_ref: Optional[bool] = None
    is_deleted: Optional[bool] = None
    parent_id: Optional[str] = None


class DocumentContentBase(BaseModel):
    markdown_content: str
    language: Optional[str] = None
    # These fields will be auto-generated by the content processor
    keywords_array: Optional[List[str]] = None
    urls_array: Optional[List[str]] = None
    summary: Optional[str] = None


class DocumentContentCreate(DocumentContentBase):
    pass


class DocumentContentRead(DocumentContentBase):
    version: str
    document_id: str
    created_at: datetime
    updated_at: datetime



class DocumentTree(BaseModel):
    documentation: Optional[List[dict]] = None
    api_references: Optional[List[dict]] = None